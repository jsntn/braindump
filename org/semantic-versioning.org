#+HUGO_BASE_DIR: ../
#+TITLE: Semantic Versioning
#+DATE: <2021-05-22 Sat 00:20>
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: software
#+HUGO_CATEGORIES: 
#+HUGO_DRAFT: false
#+BEGIN_QUOTE
In the world of software management there exists a dread place called "dependency hell."

The bigger your system grows and the more packages you integrate into your software, the more likely you are to find yourself, one day, in this pit of despair.

-- semver.org
#+END_QUOTE
* Summary
Given a version number MAJOR.MINOR.PATCH, increment the:

- MAJOR version when you make incompatible API changes,
- MINOR version when you add functionality in a backwards compatible manner, and
- PATCH version when you make backwards compatible bug fixes.

Additional labels for pre-release and build metadata are available as extensions
to the MAJOR.MINOR.PATCH format.

* Semantic Versioning Specification (SemVer)
- A normal version number MUST take the form X.Y.Z where X, Y, and Z are
  non-negative integers, and MUST NOT contain leading zeroes. X is the major
  version, Y is the minor version, and Z is the patch version. Each element MUST
  increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.
- Once a versioned package has been released, the contents of that version MUST
  NOT be modified. Any modifications MUST be released as a new version.
- Major version zero (0.y.z) is for initial development. Anything MAY change at
  any time. The public API SHOULD NOT be considered stable.
- Version 1.0.0 defines the public API. The way in which the version number is
  incremented after this release is dependent on this public API and how it
  changes.
- Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards
  compatible bug fixes are introduced. A bug fix is defined as an internal
  change that fixes incorrect behavior.
- Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards
  compatible functionality is introduced to the public API. It MUST be
  incremented if any public API functionality is marked as deprecated. It MAY be
  incremented if substantial new functionality or improvements are introduced
  within the private code. It MAY include patch level changes. Patch version
  MUST be reset to 0 when minor version is incremented.
- Major version X (X.y.z | X > 0) MUST be incremented if any backwards
  incompatible changes are introduced to the public API. It MAY also include
  minor and patch level changes. Patch and minor version MUST be reset to 0 when
  major version is incremented.
- A pre-release version MAY be denoted by appending a hyphen and a series of dot
  separated identifiers immediately following the patch version. Identifiers
  MUST comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-]. Identifiers
  MUST NOT be empty. Numeric identifiers MUST NOT include leading
  zeroes. Pre-release versions have a lower precedence than the associated
  normal version. A pre-release version indicates that the version is unstable
  and might not satisfy the intended compatibility requirements as denoted by
  its associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1,
  1.0.0-0.3.7, 1.0.0-x.7.z.92, 1.0.0-x-y-z.–.
* FAQ
** How do I know when to release 1.0.0?
If your software is being used in production, it should probably already be
1.0.0. If you have a stable API on which users have come to depend, you should
be 1.0.0. If you’re worrying a lot about backwards compatibility, you should
probably already be 1.0.0.
* Reference
- https://semver.org
- https://en.wikipedia.org/wiki/Software_versioning
- [[https://softwareengineering.stackexchange.com/questions/3199/what-version-naming-convention-do-you-use][What “version naming convention” do you use?]]
- [[https://vitalflux.com/software-build-release-versioning-strategy/][Software Build & Release Versioning Strategy]]
- [[https://devhints.io/semver][Semver cheatsheet]]
- [[https://bytearcher.com/goodies/semantic-versioning-cheatsheet/][Semantic Versioning Cheatsheet]]
- [[https://jubianchi.github.io/semver-check/][Semver check]]
- https://docs.npmjs.com/about-semantic-versioning
- [[https://semver.npmjs.com][npm semver calculator]]
- [[https://juejin.cn/post/6844904037704269831][软件版本命名规范及各阶段说明]]
